/* ********************************************************************* */
/* File name:        communicationStateMachine.c                         */
/* File description: Desenvolve a maquina de estados e as outras funções */
/*                   que cuidam da comunicação                           */
/* Author name:      Gustavo M./Cassio D.                                */
/* Creation date:    03jun2020                                           */
/* Revision date:    09jun2020                                           */
/* ********************************************************************* */

/* definition include */
#include "communicationStateMachine.h"
#include "board.h"
#include "aquecedorECooler.h"
#include "adc.h"
#include "lut_adc_3v3.h"
#include "pid.h"

/* system includes */
#include "fsl_clock_manager.h"
#include "fsl_device_registers.h"
#include "fsl_port_hal.h"
#include "fsl_smc_hal.h"
#include "fsl_debug_console.h"

#define IDDLE '0'
#define READY '1'
#define GET '2'
#define SET '3'
#define PARAM '4'
#define VALUE '5'
#define MAX_VALUE_LENGHT 7

typedef union{
    unsigned char ucBytes[4];
    float fReal;
}floatUCharType;

typedef union{
    unsigned char ucBytes[4];
    int iReal;
}
intUCharType;

typedef union{
    unsigned char ucBytes[4];
    int iReal;
}
intSetPointCharType;

unsigned char ucUARTState = IDDLE;
unsigned char ucValueCount = '0';
extern int iValorTempAtual;
extern unsigned char ucAnswer[MAX_VALUE_LENGHT];
extern unsigned char ucEnable;
extern unsigned char ucTempAtual[4];
extern float fHDuty;
extern float fCDuty;
extern unsigned int uiSpTempertura;


/* ************************************************ */
/* Method name:        processamentoByte            */
/* Method description: Funcao contendo maquina de   */
/*                     estados para o processamento */
/*                     de bytes.                    */
/* Input params:       um char representando o byte */
/*                     recebido                     */
/* Output params:      n/a                          */
/* ************************************************ */
void processamentoByte(unsigned char ucByte)
{
	static unsigned char ucParam;
	static unsigned char ucValue[MAX_VALUE_LENGHT];

	/* Toda mensagem comeca com '#'*/

    if('#' == ucByte)
    {
    	ucUARTState = READY;
    }else
    {
    	if(IDDLE != ucUARTState)
    	{
    		switch(ucUARTState)
    		{
    		    case READY:
    		    	/* As opcoes sao get 'g' e set 's' */
    		    	switch(ucByte)
    		    	{
    		    	    case 'g':
    		    	    	ucUARTState = GET;
    		    	    	break;
    		    	    case 's':
    		    	    	ucUARTState = SET;
    		    	    	break;
    		    	    default:
    		    	    	ucUARTState = IDDLE;
    		    	}
    		    	break;
    		    /*
    		     * Para get, temos a opcao de temperatura 't',
    		     * duty do aquecedor 'a' e duty do cooler 'c',
    		     * 'p', 'i' e 'd' para os valores de Kp, Ki e Kd
    		     * respectivamente
    		     */
    		    case GET:
    		    	if('t' == ucByte || 'a' == ucByte || 'c' == ucByte || 'i' == ucByte || 'p' == ucByte || 'd' == ucByte)
    		    	{
    		    		ucParam = ucByte;
    		    		ucUARTState = PARAM;
    		    	}else
    		    	{
    		    		ucUARTState = IDDLE;
    		    	}
    		        break;
    		      /*
    		      * Para set, temos a opcao de temperatura 't',
    		      * 'i' para setar o Ki, 'p' para setar o Kp e 'd'
    		      * para setar o Kd
    		      */
    		    case SET:
    		    	if('t' == ucByte || 'i' == ucByte || 'p' == ucByte || 'd' == ucByte)
    		    	{
    		    		ucParam = ucByte;
    		      		ucUARTState = VALUE;
    		      		ucValueCount = 0;
         		    	}else
        		    	{
    		    	        ucUARTState = IDDLE;
    		    	  	}
    		 	        break;
    		    case PARAM:
    		    	if(';' == ucByte)
    		    	{
    		    		returnParam(ucParam);
    		    	}
    		    	ucUARTState = IDDLE;
    		    	break;
    		    /*
    		      * Verificamos se o byte recedido e um numero
    		      * ou uma virgula para o float.
    		    */
    		    case VALUE:
    		    	if((ucByte >= '0' && ucByte <= '9') || ',' == ucByte)
    		    	{
    		    		if(ucValueCount < MAX_VALUE_LENGHT)
    		    		{
    		    			ucValue[ucValueCount++] = ucByte;
    		    		}
    		    	}else
    		    	{
    		    		if(';' == ucByte)
    		    		{
    		    			ucValue[ucValueCount] = '\0';
    		    			setParam(ucParam,ucValue);
    		    		}
    		    		ucUARTState = IDDLE;
    		    	}
    		    	break;
    		}
    	}
    }

}

/* ************************************************ */
/* Method name:        returnParam                  */
/* Method description: Funcaco para retornar a      */
/*                     resposta solicitada por um   */
/*                     comando get                  */
/* Input params:       um char podendo ser 't' para */
/*                     temperatura, 'a' para duty   */
/*                     cycle do aquecedor ou 'c'    */
/*                     para o duty cycle do cooler  */
/* Output params:      n/a                          */
/* ************************************************ */
void returnParam(unsigned char ucParam)
{
	/*
	 * Colocamos o valor #a no comeco de toda mensagem de retorno
	 * para identificar a mensagem como resporta, anwser
	 */

	ucAnswer[0] = 0x23;
	ucAnswer[1] = 0x61;

	switch(ucParam)
	{
	    case 't':
	    	/*Le temperatura e armazena no vetor de answer*/
	    	lerTemp();
	        break;
	    case 'a':
	    	/*Le duty cycle do aquecedor e armazena no vetor de answer*/
	    	lerHeaterDuty();
	    	break;
	    case 'c':
	    	/*Le duty cycle do cooler e armazena no vetor de answer*/
	    	lerCoolerFanDuty();
	    	break;
	    case 'p':
	    	/*Le Kp e armazena no vetor de answer*/
	    	lerKp();
	    	break;
	    case 'i':
	    	/*Le Ki e armazena no vetor de answer*/
	    	lerKi();
	    	break;
	    case 'd':
	    	/*Le Kd e armazena no vetor de answer*/
	    	lerKd();
	    	break;
	    default:
	    	break;
	}
	/* Envia a resposta de volta para a UART */
	for(int i=0;i<MAX_VALUE_LENGHT;i++){
        debug_putchar(ucAnswer[i]);
	}
}

/* ************************************************ */
/* Method name:        setParam                     */
/* Method description: Funcao para setar parametros */
/*                                                  */
/* Input params:       recebe um vetor de char com  */
/*                     o valor para o set, e um     */
/*                     char escolhendo o parametro  */
/*                     a ser alterado, 't' para     */
/*                     temperatura e 'e' para       */
/*                     habilitar ou desabilitar a   */
/*                     interface local              */
/* Output params:      n/a                          */
/* ************************************************ */
void setParam(unsigned char ucParam,unsigned char ucValue[MAX_VALUE_LENGHT])
{
    float fAux;
    switch(ucParam){
    /*converte o valor de temperatura desejada de char para int e armazena na
     * variavel global
     */
    case 't':

	    for(int i=3; i<MAX_VALUE_LENGHT; i++){
            uiSpTempertura = convertChar2Int(ucValue[i]);
        }
	    break;
	/*converte o valor de Kp desejada de char para float e chama a
	 * funcao de set
	 */
    case 'p':
    	for(int i=3; i<MAX_VALUE_LENGHT; i++){
			fAux = convertChar2Float(ucValue[i]);
		}
    	pid_setKp(fAux);
		break;
	/*converte o valor de Ki desejada de char para float e chama a
	 * funcao de set
	 */
    case 'i':
    	for(int i=3; i<MAX_VALUE_LENGHT; i++){
    		fAux = convertChar2Float(ucValue[i]);
		}
    	pid_setKi(fAux);
		break;
	 /*converte o valor de Kd desejada de char para float e chama a
	 * funcao de set
	 */
    case 'd':
    	for(int i=3; i<MAX_VALUE_LENGHT; i++){
    		fAux = convertChar2Float(ucValue[i]);
		}
    	pid_setKd(fAux);
		break;
     /*case 'e':
	    no projeto será implementado
	    ucEnable = ucValue[0];
        break;
     case 'a':
	    for(int i=0;i<4;i++){
            aux = convertChar2Float(ucValue[i]);
	    }
	    /* Limita o duty cycle do aquecedor em 50%
	    if(aux>0.5){
	        aux=0.5;
	    }
	    heater_PWMDuty(aux);
        break;
     case 'c':
	    for(int i=0;i<4;i++){
            aux = convertChar2Float(ucValue[i]);
        }
	    coolerfan_PWMDuty(aux);
        break;*/
    }
}

/* ************************************************* */
/* Method name:        lerTemp                       */
/* Method description: Funcao para ler temperatura   */
/*                     sera reformulada nas proximas */
/*                     etapas                        */
/* Input params:       n/a                           */
/* Output params:      n/a                           */
/* ************************************************* */
void lerTemp()
{

	unsigned char ucSendChar, ucCount;
	unsigned char ucAux[4];

	/* inicia a conversao AD e espera terminar */
    adc_initConvertion();
    while(!adc_isAdcDone())
    {

    }

    /* pega o valor correspondente a tabela e converte de int para char*/
    iValorTempAtual = tabela_temp[adc_getConvertionValue()];
    ucAux = convertInt2Char(iValorTempAtual);

    /* armazena o valor na variavel answer*/
    for (ucCount= 0; ucCount< 4; ucCount++)
    	{
    		ucSendChar= ucAux[ucCount];
    		ucAnswer[ucCount+2] = ucSendChar;
    	}
    ucAnswer[6] = 0x3b;


}

/* ************************************************* */
/* Method name:        heater_PWMDuty                */
/* Method description: Funcao para ler duty cycle do */
/*                     aquecedor, sera reformulada   */
/*                     nas proximas etapas           */
/* Input params:       n/a                           */
/* Output params:      n/a                           */
/* ************************************************* */
void lerHeaterDuty()
{
	unsigned char ucHeaterDuty[4];

	/* le a variavel global de duty, converte de float para char e armazena na anwser */
	ucHeaterDuty = convertFloat2Char(fHDuty);
    for(int i=0;i<4;i++){
        ucAnswer[i+2] = ucHeaterDuty[i];
    }
    ucAnswer[6] = 0x3b;
}

/* ************************************************* */
/* Method name:        coolerFan_PWMDuty             */
/* Method description: Funcao para ler duty cycle do */
/*                     cooler, sera reformulada nas  */
/*                     proximas etapas               */
/* Input params:       n/a                           */
/* Output params:      n/a                           */
/* ************************************************* */
void lerCoolerFanDuty()
{
	unsigned char ucCoolerDuty[4];

	/* le a variavel global de duty, converte de float para char e armazena na anwser */
	ucCoolerDuty = convertFloat2Char(fCDuty);

    for(int i=0;i<4;i++){
	    ucAnswer[i+2] = ucCoolerDuty[i];
    }
    ucAnswer[6] = 0x3b;
}
/* ************************************************* */
/* Method name:        lerKp                         */
/* Method description: Funcao para ler duty cycle do */
/*                     cooler, sera reformulada nas  */
/*                     proximas etapas               */
/* Input params:       n/a                           */
/* Output params:      n/a                           */
/* ************************************************* */
void lerKp()
{
	unsigned char Kp[4];

	/* le o valor de Kp, converte de float para char e armazena na anwser */
	Kp = convertFloat2Char(pid_getKp());

	for(int i=0;i<4;i++){
		ucAnswer[i+2] = Kp[i];
	}
	ucAnswer[6] = 0x3b;
}

/* ************************************************* */
/* Method name:        lerKi                        */
/* Method description: Funcao para ler duty cycle do */
/*                     cooler, sera reformulada nas  */
/*                     proximas etapas               */
/* Input params:       n/a                           */
/* Output params:      n/a                           */
/* ************************************************* */
void lerKi()
{
	unsigned char Ki[4];

	/* le o valor de Ki, converte de float para char e armazena na anwser */
	Ki = convertFloat2Char(pid_getKi());

	for(int i=0;i<4;i++){
		ucAnswer[i+2] = Ki[i];
	}
	ucAnswer[6] = 0x3b;
}

/* ************************************************* */
/* Method name:        lerKd                         */
/* Method description: Funcao para ler duty cycle do */
/*                     cooler, sera reformulada nas  */
/*                     proximas etapas               */
/* Input params:       n/a                           */
/* Output params:      n/a                           */
/* ************************************************* */
void lerKd()
{
	unsigned char Kd[4];

	/* le o valor de Kd, converte de float para char e armazena na anwser */
	Kd = convertFloat2Char(pid_getKd());

	for(int i=0;i<4;i++){
		ucAnswer[i+2] = Kd[i];
	}
	ucAnswer[6] = 0x3b;
}

/* **************************************************** */
/* Method name:        convertChar2Float                */
/* Method description: Funcao que converte 4 caracteres */
/*                     para um valor float              */
/* Input params:       caracter                         */
/* Output params:      valor float                      */
/* **************************************************** */
float convertChar2Float(unsigned char ucReceivedChar)
{
	floatUCharType varFloatUChar;
	static unsigned char ucCount;

	varFloatUChar.ucBytes[ucCount] = ucReceivedChar;
	if(++ucCount>= 4)
	{
		return varFloatUChar.fReal;
		ucCount= 0;

	}
	return (0);
}

/* **************************************************** */
/* Method name:        convertInt2Char                  */
/* Method description: Funcao que converte um valor int */
/*                     para um valor de 4 caracteres    */
/* Input params:       valor int                        */
/* Output params:      n/a                              */
/* **************************************************** */
unsigned char convertFloat2Char(float fReceivedFloat)
{
	floatUCharType varCharUFloat;
	static unsigned char ucCount;
	unsigned char ucSendChar;
	unsigned char ucAux[4];

	varCharUFloat.fReal= fReceivedFloat;

	ucAux = varCharUFloat.ucBytes;

	return(ucAux);
}

/* **************************************************** */
/* Method name:        convertInt2Char                  */
/* Method description: Funcao que converte um valor int */
/*                     para um valor de 4 caracteres    */
/* Input params:       valor int                        */
/* Output params:      n/a                              */
/* **************************************************** */
unsigned char convertInt2Char(int ucReceivedInt)
{
	intUCharType varIntUChar;
	unsigned char ucSendChar, ucCount;
	unsigned char ucAux[4];

	varIntUChar.iReal= ucReceivedInt;
	ucAux = varIntUChar.ucBytes
	/*for (ucCount= 0; ucCount< 4; ucCount++)
	{
		ucSendChar= varIntUChar.ucBytes[ucCount];
		ucAux[ucCount+2] = ucSendChar;
	}
	ucAux[6] = 0x3b;*/
	return(ucAux);
}

/* **************************************************** */
/* Method name:        convertChar2Float                */
/* Method description: Funcao que converte 4 caracteres */
/*                     para um valor float              */
/* Input params:       caracter                         */
/* Output params:      valor float                      */
/* **************************************************** */
int convertChar2Int(unsigned char ucReceivedChar)
{
	intSetPointCharType varChar2int;
	static unsigned char ucCount;

	varChar2int.ucBytes[ucCount] = ucReceivedChar;
	if(++ucCount>= 4)
	{
		return varChar2int.iReal;
		ucCount= 0;

	}
	return (0);
}
