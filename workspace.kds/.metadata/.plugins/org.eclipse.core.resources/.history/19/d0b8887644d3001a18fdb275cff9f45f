/* ************************************************************************ */
/* Nome do Arquivo:      lcd.c                                              */
/* Descricao do arquivo: Este arquivo e dedicado criar todas as funcoes     */
/*                   	 do lcd, escrita de comando, escrita de dados e     */
/*                       inicializacao                                      */
/* Nome dos autores:     Gustavo Moraes/Cassio Dezotti                      */
/* RA:                   174217/168988                                      */
/* Data de criacao:      06abril2020                                        */
/* Data da revisao:      09abril2020                                        */
/* ************************************************************************ */

#include "lcd.h"
#include "board.h"
#include "util.h"

/* includes do sistema */
#include "fsl_clock_manager.h"
#include "fsl_port_hal.h"
#include "fsl_gpio_hal.h"

/* linha e coluna zero */
#define LINE0        0U
#define COLUMN0      0U
#define L0C0_BASE    0x80
#define L1C0_BASE    0xC0
#define MAX_COLUMN  15U

/* *********************************************************************  */
/* Nome da funcao: lcd_initLcd                                            */
/* Descricao da funcao: Essa funcao inicializa todo o LCD e os parametros */
/*                      necessarios como o clock, a porta e os pinos.     */
/* Parametros de entrada:    n/a                                          */
/* Parametros de saida:      n/a                                          */
/* *********************************************************************  */
void lcd_initLcd(void)
{
    unsigned int uiVetorInit = 0;

    /* pins configured as outputs */

    /* un-gate port clock*/
    SIM_SCGC5 |= 0x0800;

    /*
     * set pin as gpio 0 = DB0, 1 = DB1...
     * 8 = RS, 9 = Enable.
     */
    PORTC_PCR8 |= 0X100;
    PORTC_PCR9 |= 0X100;
    PORTC_PCR0 |= 0X100;
    PORTC_PCR1 |= 0X100;
    PORTC_PCR2 |= 0X100;
    PORTC_PCR3 |= 0X100;
    PORTC_PCR4 |= 0X100;
    PORTC_PCR5 |= 0X100;
    PORTC_PCR6 |= 0X100;
    PORTC_PCR7 |= 0X100;

    /* set pin as digital output */
    for(int i=0;i<10;i++)
    {
        uiVetorInit |= (1 << i);
    }
    /*
     * Apos esse for, temos um dos primeiros 10 pinos setados com 1
     * para passar como output.
     */
    GPIOC_PDDR |= uiVetorInit;

    /* turn-on LCD, with no cursor and no blink */
    lcd_sendCommand(CMD_NO_CUR_NO_BLINK);

    /* init LCD */
    lcd_sendCommand(CMD_INIT_LCD);

    /* clear LCD */
    lcd_sendCommand(CMD_CLEAR);

    /* LCD with no cursor */
    lcd_sendCommand(CMD_NO_CURSOR);

    /* cursor shift to right */
    lcd_sendCommand(CMD_CURSOR2R);
}

/* ****************************************************************** */
/* Nome da funcao: lcd_write2Lcd                                      */
/* Descricao da funcao: funcao que faz a escrita de um dado no LCD.   */
/*                                                                    */
/* Parametros de entrada: Recebe um caractere de dado ou comando      */
/*                        e o tipo da acao que ela realizarao.        */
/*                        Se 0 --> LCD recebera um comando            */
/*                        Se 1 --> LCD recebera um dado               */
/* Parametros de saida:   n/a                                         */
/* ****************************************************************** */
void lcd_write2Lcd(unsigned char ucBuffer,  unsigned char ucDataType)
{

    unsigned char ucAux = 0;

    /* writing data or command */
    if(LCD_RS_CMD == ucDataType){
        /* will send a command */
       GPIOC_PSOR &= ~(0x17F);
       GPIOC_PCOR |= (1 << LCD_RS_PIN);
    }
    else{
        /* will send data */
       GPIOC_PSOR &= ~(0x17F);
       GPIOC_PSOR |= (1 << LCD_RS_PIN);
    }

    /*
     * Faz um E bit a bit com o caracter armazenado no ucBuffer
     * extraindo os 8 primeiros bit do buffer para a variavel
     * ucAux.
     */
    for(int i=0;i<8;i++)
    {
     ucAux |= (ucBuffer & (1u << i));
    }

    /* Envia os 8 primeiros bits de data para as portas */
    GPIOC_PDOR |= ucAux;

    /*
     *
     *enable, delay, disable LCD
     *this generates a pulse in the enable pin this
     */
    GPIOC_PSOR |= (1 << LCD_ENABLE_PIN);
    util_genDelay1ms();

    GPIOC_PCOR |= (1 << LCD_ENABLE_PIN);

    util_genDelay1ms();
    util_genDelay1ms();
}

/* ****************************************************************** */
/* Nome da funcao: lcd_writeData                                      */
/* Descricao da funcao: funcao de apoio que faz a chamada da          */
/*                      funcao lcd_Write2Lcd a qual escreve no LCD    */
/*                                                                    */
/* Parametros de entrada: Recebe um valor 0 ou 1                      */
/*                        Se 0 --> LCD recebera um comando            */
/*                        Se 1 --> LCD recebera um dado               */
/* Parametros de saida:   n/a                                         */
/* ****************************************************************** */
void lcd_writeData(unsigned char ucData)
{
    /* just a relay to send data */
    lcd_write2Lcd(ucData, LCD_RS_DATA);
}

/* ****************************************************************** */
/* Nome da funcao: lcd_sendoCommand                                   */
/* Descricao da funcao: funcao que manda um comando para a            */
/*                      funcao lcd_Write2Lcd a qual realiza no LCD    */
/*                                                                    */
/* Parametros de entrada: Recebe um valor 0 ou 1                      */
/*                        Se 0 --> mandara um comando ao LCD          */
/*                        Se 1 --> mandara um dado ao LCD             */
/* Parametros de saida:   n/a                                         */
/* ****************************************************************** */
void lcd_sendCommand(unsigned char ucCmd)
{
    /* just a relay to send command */
    lcd_write2Lcd(ucCmd, LCD_RS_CMD);
}

/* ****************************************************************** */
/* Nome da funcao: lcd_setCursor                                      */
/* Descricao da funcao: Coloca o cursor na linha e coluna recebidas   */
/*                      por parametro                                 */
/*                                                                    */
/* Parametros de entrada: Recebe um valor para a linha e coluna       */
/* Parametros de saida:   n/a                                         */
/* ****************************************************************** */
void lcd_setCursor(unsigned char ucLine, unsigned char ucColumn)
{
    char ucCommand;

    if(LINE0 == ucLine)
        /* line 0 */
    	ucCommand = L0C0_BASE;
    else
        /* line 1 */
    	ucCommand = L1C0_BASE;

    /* maximum MAX_COLUMN columns */
    ucCommand += (ucColumn & MAX_COLUMN);

    /* send the command to set the cursor */

    lcd_sendCommand(ucCommand);
}

/* ****************************************************************** */
/* Nome da funcao: lcd_writeString                                    */
/* Descricao da funcao: Recebe a string que sera enviada ao           */
/*                      o LCD                                         */
/*                                                                    */
/* Parametros de entrada: A string                                    */
/* Parametros de saida:   n/a                                         */
/* ****************************************************************** */
void lcd_writeString(const char *cBuffer)
{
    while(*cBuffer)
    {
        lcd_writeData(*cBuffer++);
    }
}

/* ********************************************************************** */
/* Nome da funcao: lcd_dummyText                                          */
/* Descricao da funcao: Faz a configuracao da mensagem que sera exibida   */
/*                                                                        */
/* Parametros de entrada: n/a                                             */
/* Parametros de saida:   n/a                                             */
/* ********************************************************************** */
void lcd_dummyText(void)
{
    /* clear LCD */
    lcd_sendCommand(CMD_CLEAR);
    /* set the cursor line 0, column 1 */
    lcd_setCursor(0,1);

    /* send string */
    lcd_writeString("*** ES670 ***");

    /* set the cursor line 1, column 0 */

    lcd_setCursor(1,0);
    lcd_writeString("Prj Sis Embarcad");
}

/* ********************************************************************** */
/* Nome da funcao: lcd_writeText                                          */
/* Descricao da funcao: Recebe do programador qual mensagem ser√° exibida */
/*                      e em qual linha e coluna do LCD isso ocorrera     */
/*                                                                        */
/* Parametros de entrada: A string e a linha e coluna do LCD              */
/* Parametros de saida:   n/a                                             */
/* ********************************************************************** */
void lcd_writeText(int iLinha, const char *cString)
{
    /*
     * Primeiro analisa se a linha a ser escrita e a primeira
     * ou a segunda, chamando a funcao setCursor para definir onde
     * a mensagem comeca. Em seguida enviamos a String para ser escrita
     * no LCD
     */
    if(0 == iLinha)
    {
        lcd_setCursor(LINE0,COLUMN0);
        lcd_writeString(cString);
    }
    else if(1 == iLinha)
    {
        lcd_setCursor(1,COLUMN0);
        lcd_writeString(cString);
    }
}
